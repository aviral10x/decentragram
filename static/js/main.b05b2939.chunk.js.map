{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","photo.png","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","_this","Object","D_JS_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","D_JS_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","D_JS_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","uploadImage","description","add","error","loading","decentragram","methods","hash","send","from","account","on","images","bind","D_JS_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","tipImageOwner","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Decentragram","networks","Contract","abi","address","imageCount","imagesCount","i","image","concat","D_JS_decentragram_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","sort","b","tipAmount","id","_this2","value","react__WEBPACK_IMPORTED_MODULE_10___default","_Navbar__WEBPACK_IMPORTED_MODULE_12__","className","_Main__WEBPACK_IMPORTED_MODULE_13__","Component","Navbar","react__WEBPACK_IMPORTED_MODULE_5___default","href","rel","src","photo","width","height","alt","Identicon","toString","module","exports","__webpack_require__","p","Main","role","style","maxWidth","onSubmit","imageDescription","type","accept","onChange","ref","input","placeholder","required","class","map","key","author","utils","fromWei","name","onClick","toWei"],"mappings":"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","file":"static/js/main.b05b2939.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import Decentragram from \"../abis/Decentragram.json\";\r\nimport React, { Component } from \"react\";\r\nimport Identicon from \"identicon.js\";\r\nimport Navbar from \"./Navbar\";\r\nimport Main from \"./Main\";\r\nimport Web3 from \"web3\";\r\nimport \"./App.css\";\r\n\r\n//Declare IPFS\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\nconst ipfs = ipfsClient({\r\n  host: \"ipfs.infura.io\",\r\n  port: 5001,\r\n  protocol: \"https\",\r\n}); // leaving out the arguments will default to these values\r\n\r\nclass App extends Component {\r\n  async componentWillMount() {\r\n    await this.loadWeb3();\r\n    await this.loadBlockchainData();\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\r\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n      );\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3;\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts();\r\n    this.setState({ account: accounts[0] });\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId();\r\n    const networkData = Decentragram.networks[networkId];\r\n    if (networkData) {\r\n      const decentragram = new web3.eth.Contract(\r\n        Decentragram.abi,\r\n        networkData.address\r\n      );\r\n      this.setState({ decentragram });\r\n      const imagesCount = await decentragram.methods.imageCount().call();\r\n      this.setState({ imagesCount });\r\n      // Load images\r\n      for (var i = 1; i <= imagesCount; i++) {\r\n        const image = await decentragram.methods.images(i).call();\r\n        this.setState({\r\n          images: [...this.state.images, image],\r\n        });\r\n      }\r\n      // Sort images. Show highest tipped images first\r\n      this.setState({\r\n        images: this.state.images.sort((a, b) => b.tipAmount - a.tipAmount),\r\n      });\r\n      this.setState({ loading: false });\r\n    } else {\r\n      window.alert(\"Decentragram contract not deployed to detected network.\");\r\n    }\r\n  }\r\n\r\n  captureFile = (event) => {\r\n    event.preventDefault();\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) });\r\n      console.log(\"buffer\", this.state.buffer);\r\n    };\r\n  };\r\n\r\n  uploadImage = (description) => {\r\n    console.log(\"Submitting file to ipfs...\");\r\n\r\n    //adding file to the IPFS\r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log(\"Ipfs result\", result);\r\n      if (error) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n\r\n      this.setState({ loading: true });\r\n      this.state.decentragram.methods\r\n        .uploadImage(result[0].hash, description)\r\n        .send({ from: this.state.account })\r\n        .on(\"transactionHash\", (hash) => {\r\n          this.setState({ loading: false });\r\n        });\r\n    });\r\n  };\r\n\r\n  tipImageOwner(id, tipAmount) {\r\n    this.setState({ loading: true });\r\n    this.state.decentragram.methods\r\n      .tipImageOwner(id)\r\n      .send({ from: this.state.account, value: tipAmount })\r\n      .on(\"transactionHash\", (hash) => {\r\n        this.setState({ loading: false });\r\n      });\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      account: \"\",\r\n      decentragram: null,\r\n      images: [],\r\n      loading: true,\r\n    };\r\n\r\n    this.uploadImage = this.uploadImage.bind(this);\r\n    this.tipImageOwner = this.tipImageOwner.bind(this);\r\n    this.captureFile = this.captureFile.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        {this.state.loading ? (\r\n          <div id=\"loader\" className=\"text-center mt-5\">\r\n            <p>Loading...</p>\r\n          </div>\r\n        ) : (\r\n          <Main\r\n            images={this.state.images}\r\n            captureFile={this.captureFile}\r\n            uploadImage={this.uploadImage}\r\n            tipImageOwner={this.tipImageOwner}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\nimport photo from '../photo.png'\r\n\r\nclass Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"https://github.com/aviral10x\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img\r\n            src={photo}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n            alt=\"\"\r\n          />\r\n          Decentragram\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n            <small className=\"text-secondary\">\r\n              <small id=\"account\">{\"0x0\"}</small>\r\n            </small>\r\n            {this.props.account ? (\r\n              <img\r\n                className=\"ml-2\"\r\n                width=\"30\"\r\n                height=\"30\"\r\n                src={`data:image/png;base64,${new Identicon(\r\n                  this.props.account,\r\n                  30\r\n                ).toString()}`}\r\n              />\r\n            ) : (\r\n              <span></span>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","module.exports = __webpack_public_path__ + \"static/media/photo.d6cbd8e6.png\";","import React, { Component } from \"react\";\r\nimport Identicon from \"identicon.js\";\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid mt-5\">\r\n        <div className=\"row\">\r\n          <main\r\n            role=\"main\"\r\n            className=\"col-lg-12 ml-auto mr-auto\"\r\n            style={{ maxWidth: \"500px\" }}\r\n          >\r\n            <div className=\"content mr-auto ml-auto\">\r\n              <p>&nbsp;</p>\r\n              <h2>Share Image</h2>\r\n              <form\r\n                onSubmit={(event) => {\r\n                  event.preventDefault();\r\n                  const description = this.imageDescription.value;\r\n                  this.props.uploadImage(description);\r\n                }}\r\n              >\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\".jpg, .jpeg, .png, .bmp, .gif\"\r\n                  onChange={this.props.captureFile}\r\n                />\r\n                <div className=\"form-group mr-sm-2\">\r\n                  <br></br>\r\n                  <input\r\n                    id=\"imageDescription\"\r\n                    type=\"text\"\r\n                    ref={(input) => {\r\n                      this.imageDescription = input;\r\n                    }}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Image description...\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary btn-block btn-lg\">\r\n                  Upload!\r\n                </button>\r\n              </form>\r\n              <p>&nbsp;</p>\r\n              {this.props.images.map((image, key) => {\r\n                return (\r\n                  <div className=\"card mb-4\" key={key}>\r\n                    <div className=\"card-header\">\r\n                      <img\r\n                        className=\"mr-2\"\r\n                        width=\"30\"\r\n                        height=\"30\"\r\n                        src={`data:image/png;base64,${new Identicon(\r\n                          image.author,\r\n                          30\r\n                        ).toString()}`}\r\n                      />\r\n                      <small className=\"text-muted\">{image.author}</small>\r\n                    </div>\r\n                    <ul id=\"imageList\" className=\"list-group list-group-flush\">\r\n                      <li className=\"list-group-item\">\r\n                        <p class=\"text-center\">\r\n                          <img\r\n                            src={`https://ipfs.infura.io/ipfs/${image.hash}`}\r\n                            style={{ maxWidth: \"420px\" }}\r\n                          />\r\n                        </p>\r\n                        <p>{image.description}</p>\r\n                      </li>\r\n                      <li key={key} className=\"list-group-item py-2\">\r\n                        <small className=\"float-left mt-1 text-muted\">\r\n                          TIPS:{\" \"}\r\n                          {window.web3.utils.fromWei(\r\n                            image.tipAmount.toString(),\r\n                            \"Ether\"\r\n                          )}{\" \"}\r\n                          ETH\r\n                        </small>\r\n                        <button\r\n                          className=\"btn btn-link btn-sm float-right pt-0\"\r\n                          name={image.id}\r\n                          onClick={(event) => {\r\n                            let tipAmount = window.web3.utils.toWei(\r\n                              \"0.1\",\r\n                              \"Ether\"\r\n                            );\r\n                            console.log(event.target.name, tipAmount);\r\n                            this.props.tipImageOwner(\r\n                              event.target.name,\r\n                              tipAmount\r\n                            );\r\n                          }}\r\n                        >\r\n                          TIP 0.1 ETH\r\n                        </button>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n"],"sourceRoot":""}